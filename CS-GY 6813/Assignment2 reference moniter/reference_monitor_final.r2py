"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py
    
    """ 
class RepyParityError(Exception):
  pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
    self.file = openfile(self.fn,create)
    self.lock = createlock()

  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def writeat(self,data,offset):
    self.lock.acquire(True)
    thisdata = ''
    # check the parity of the data written
    if data == '': # write nothing and leave the file unmodified
      self.lock.release()
      return
    if offset % 8 == 0:
      before = ''
    else:
      try:
        before = self.readat(offset - offset//8*8, offset//8*8)
      except SeekPastEndOfFileError:
        self.lock.release()
        raise SeekPastEndOfFileError("Seek offset extends past the EOF!")
      except RepyArgumentError:
        self.lock.release()
        raise RepyArgumentError
    try:
      after = self.readat(8, (len(data)+offset-1)//8*8)[len(data)+offset - (len(data)+offset-1)//8*8:]
    except:
      after = ''
    thisdata = before + data + after
    while len(thisdata) >= 8:
      even = True
      for thisbyte in thisdata[:8]:
        # for each byte, if it is odd, flip even to be the opposite
        if ord(thisbyte) % 2:
          even = not even
      # actually call write, if we are supposed to...
      if not even:
        self.lock.release()
        raise RepyParityError("Non-even parity write to file")
      thisdata = thisdata[8:]
    try:
      self.file.writeat(data,offset)
      self.lock.release()
    except SeekPastEndOfFileError:
      self.lock.release()
      raise SeekPastEndOfFileError("Seek offset extends past the EOF!")
    except RepyArgumentError:
      self.lock.release()
      raise RepyArgumentError

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()